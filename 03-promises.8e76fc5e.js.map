{"version":3,"sources":["js/03-promises.js"],"names":["refs","form","document","querySelector","delay","step","amount","intervalID","position","onFormEnterValue","e","Number","currentTarget","elements","value","console","log","createPromise","shouldResolve","Math","random","Promise","resolve","reject","onRunPromise","counterValue","preventDefault","setTimeout","clearTimeout","then","catch","addEventListener"],"mappings":";AAAA,MAAMA,EAAO,CACXC,KAAMC,SAASC,cAAc,UAG/B,IAAIC,EAAQ,KACRC,EAAO,KACPC,EAAS,KAETC,EAAa,KACbC,EAAW,KAEf,SAASC,EAAiBC,GACxBN,EAAQO,OAAOD,EAAEE,cAAcC,SAAST,MAAMU,OAC9CT,EAAOM,OAAOD,EAAEE,cAAcC,SAASR,KAAKS,OAC5CR,EAASK,OAAOD,EAAEE,cAAcC,SAASP,OAAOQ,OAChDC,QAAQC,eAAeZ,YAAgBC,cAAiBC,MAM1D,SAASW,EAAcT,EAAUJ,GACzBc,MAAAA,EAAgBC,KAAKC,SAAW,GAC/B,OAAA,IAAIC,QAAQ,CAACC,EAASC,KACvBL,EACFI,EAAQ,CAAEd,SAAAA,EAAUJ,MAAAA,IAEpBmB,EAAO,CAAEf,SAAAA,EAAUJ,MAAAA,MAKzB,SAASoB,EAAad,GAChBe,IAAAA,EAAe,KACnBf,EAAEgB,iBAEFnB,EAAaoB,WAAW,KAClBF,GAAAA,IAAiBd,OAAOL,GAI1B,OAHAsB,aAAarB,GACbkB,EAAe,UACfjB,EAAW,MAIbiB,GAAgB,EAChBR,EAFAT,GAAY,EAEYJ,GACrByB,KAAK,EAAGrB,SAAAA,EAAUJ,MAAAA,MACjBW,QAAQC,2BAA2BR,QAAeJ,SAEnD0B,MAAM,EAAGtB,SAAAA,EAAUJ,MAAAA,MAClBW,QAAQC,0BAA0BR,QAAeJ,UAEpDA,GAlCLJ,EAAKC,KAAK8B,iBAAiB,QAAStB,GACpCT,EAAKC,KAAK8B,iBAAiB,SAAUP","file":"03-promises.8e76fc5e.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  form: document.querySelector('.form'),\n};\n\nlet delay = null;\nlet step = null;\nlet amount = null;\n\nlet intervalID = null;\nlet position = null;\n\nfunction onFormEnterValue(e) {\n  delay = Number(e.currentTarget.elements.delay.value);\n  step = Number(e.currentTarget.elements.step.value);\n  amount = Number(e.currentTarget.elements.amount.value);\n  console.log(`{delay: ${delay}, step: ${step}, amount: ${amount}}`);\n}\n\nrefs.form.addEventListener('input', onFormEnterValue);\nrefs.form.addEventListener('submit', onRunPromise);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n\nfunction onRunPromise(e) {\n  let counterValue = null;\n  e.preventDefault();\n\n  intervalID = setTimeout(() => {\n    if (counterValue === Number(amount)) {\n      clearTimeout(intervalID);\n      counterValue = null;\n      position = null;\n      return;\n    }\n    position += 1;\n    counterValue += 1;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }, delay);\n}\n"]}