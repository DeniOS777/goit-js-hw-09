{"version":3,"sources":["js/03-promises.js"],"names":["refs","form","document","querySelector","delay","step","amount","intervalID","counterValue","position","onFormEnterValue","e","currentTarget","elements","value","console","log","createPromise","shouldResolve","Math","random","Promise","resolve","reject","onRunPromise","preventDefault","setInterval","clearInterval","then","catch","addEventListener"],"mappings":";AAAA,MAAMA,EAAO,CACXC,KAAMC,SAASC,cAAc,UAG/B,IAAIC,EAAQ,GACRC,EAAO,GACPC,EAAS,GAETC,EAAa,KACbC,EAAe,KACfC,EAAW,KAEf,SAASC,EAAiBC,GACxBP,EAAQO,EAAEC,cAAcC,SAAST,MAAMU,MACvCT,EAAOM,EAAEC,cAAcC,SAASR,KAAKS,MACrCR,EAASK,EAAEC,cAAcC,SAASP,OAAOQ,MACzCC,QAAQC,eAAeZ,YAAgBC,cAAiBC,MAM1D,SAASW,EAAcR,EAAUL,GACzBc,MAAAA,EAAgBC,KAAKC,SAAW,GAC/B,OAAA,IAAIC,QAAQ,CAACC,EAASC,KACvBL,EACFI,EAAQ,CAAEb,SAAAA,EAAUL,MAAAA,IAEpBmB,EAAO,CAAEd,SAAAA,EAAUL,MAAAA,MAKzB,SAASoB,EAAab,GACpBA,EAAEc,iBAEFlB,EAAamB,YAAY,KACnBlB,GAAAA,GAAgBF,EAIlB,OAHAqB,cAAcpB,GACdC,EAAe,UACfC,EAAW,MAIbD,GAAgB,EAChBS,EAFAR,GAAY,EAEYL,GACrBwB,KAAK,EAAGnB,SAAAA,EAAUL,MAAAA,MACjBW,QAAQC,2BAA2BP,QAAeL,SAEnDyB,MAAM,EAAGpB,SAAAA,EAAUL,MAAAA,MAClBW,QAAQC,0BAA0BP,QAAeL,UAEpDA,GAjCLJ,EAAKC,KAAK6B,iBAAiB,QAASpB,GACpCV,EAAKC,KAAK6B,iBAAiB,SAAUN","file":"03-promises.ba93ff76.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  form: document.querySelector('.form'),\n};\n\nlet delay = '';\nlet step = '';\nlet amount = '';\n\nlet intervalID = null;\nlet counterValue = null;\nlet position = null;\n\nfunction onFormEnterValue(e) {\n  delay = e.currentTarget.elements.delay.value;\n  step = e.currentTarget.elements.step.value;\n  amount = e.currentTarget.elements.amount.value;\n  console.log(`{delay: ${delay}, step: ${step}, amount: ${amount}}`);\n}\n\nrefs.form.addEventListener('input', onFormEnterValue);\nrefs.form.addEventListener('submit', onRunPromise);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n\nfunction onRunPromise(e) {\n  e.preventDefault();\n\n  intervalID = setInterval(() => {\n    if (counterValue >= amount) {\n      clearInterval(intervalID);\n      counterValue = null;\n      position = null;\n      return;\n    }\n    position += 1;\n    counterValue += 1;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }, delay);\n}\n"]}